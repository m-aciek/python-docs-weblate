# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-14 16:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ""

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr ""

#: ../../library/dbm.rst:11
msgid ":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  There is a `third party interface <https://www.jcea.es/programacion/pybsddb.htm>`_ to the Oracle Berkeley DB."
msgstr ""

#: ../../library/dbm.rst:20
msgid "A tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named :exc:`dbm.error` as the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

#: ../../library/dbm.rst:27
msgid "This function attempts to guess which of the several simple database modules available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should be used to open a given file."
msgstr ""

#: ../../library/dbm.rst:31
msgid "Return one of the following values:"
msgstr ""

#: ../../library/dbm.rst:33
msgid "``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""

#: ../../library/dbm.rst:34
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr ""

#: ../../library/dbm.rst:35
msgid "a string containing the required module name, such as ``'dbm.ndbm'`` or ``'dbm.gnu'``"
msgstr ""

#: ../../library/dbm.rst:37
#: ../../library/dbm.rst:203
#: ../../library/dbm.rst:384
msgid "*filename* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:65
msgid "Open a database and return the corresponding database object."
msgstr ""

#: ../../library/dbm.rst:0
msgid "Parameters"
msgstr ""

#: ../../library/dbm.rst:67
msgid "The database file to open.  If the database file already exists, the :func:`whichdb` function is used to determine its type and the appropriate module is used; if it does not exist, the first submodule listed above that can be imported is used."
msgstr ""

#: ../../library/dbm.rst:68
#: ../../library/dbm.rst:175
msgid "The database file to open."
msgstr ""

#: ../../library/dbm.rst:70
msgid "If the database file already exists, the :func:`whichdb` function is used to determine its type and the appropriate module is used; if it does not exist, the first submodule listed above that can be imported is used."
msgstr ""

#: ../../library/dbm.rst:75
#: ../../library/dbm.rst:295
msgid "* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * ``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:76
#: ../../library/dbm.rst:180
#: ../../library/dbm.rst:296
msgid "``'r'`` (default): |flag_r|"
msgstr ""

#: ../../library/dbm.rst:77
#: ../../library/dbm.rst:181
#: ../../library/dbm.rst:297
#: ../../library/dbm.rst:365
msgid "``'w'``: |flag_w|"
msgstr ""

#: ../../library/dbm.rst:78
#: ../../library/dbm.rst:182
#: ../../library/dbm.rst:298
msgid "``'c'``: |flag_c|"
msgstr ""

#: ../../library/dbm.rst:79
#: ../../library/dbm.rst:183
#: ../../library/dbm.rst:299
#: ../../library/dbm.rst:367
msgid "``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:81
#: ../../library/dbm.rst:197
#: ../../library/dbm.rst:301
#: ../../library/dbm.rst:369
msgid "|mode_param_doc|"
msgstr ""

#: ../../library/dbm.rst:84
msgid "*file* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:87
msgid "The object returned by :func:`~dbm.open` supports the same basic functionality as a :class:`dict`; keys and their corresponding values can be stored, retrieved, and deleted, and the :keyword:`in` operator and the :meth:`!keys` method are available, as well as :meth:`!get` and :meth:`!setdefault` methods."
msgstr ""

#: ../../library/dbm.rst:92
msgid "Key and values are always stored as :class:`bytes`. This means that when strings are used they are implicitly converted to the default encoding before being stored."
msgstr ""

#: ../../library/dbm.rst:96
msgid "These objects also support being used in a :keyword:`with` statement, which will automatically close them when done."
msgstr ""

#: ../../library/dbm.rst:99
msgid ":meth:`!get` and :meth:`!setdefault` methods are now available for all :mod:`dbm` backends."
msgstr ""

#: ../../library/dbm.rst:103
msgid "Added native support for the context management protocol to the objects returned by :func:`~dbm.open`."
msgstr ""

#: ../../library/dbm.rst:107
msgid "Deleting a key from a read-only database raises a database module specific exception instead of :exc:`KeyError`."
msgstr ""

#: ../../library/dbm.rst:111
msgid "The following example records some hostnames and a corresponding title,  and then prints out the contents of the database::"
msgstr ""

#: ../../library/dbm.rst:141
msgid "Module :mod:`shelve`"
msgstr ""

#: ../../library/dbm.rst:142
msgid "Persistence module which stores non-string data."
msgstr ""

#: ../../library/dbm.rst:145
msgid "The individual submodules are described in the following sections."
msgstr ""

#: ../../library/dbm.rst:149
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ""

#: ../../library/dbm.rst:155
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr ""

#: ../../library/dbm.rst:159
msgid "The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional functionality like crash tolerance."
msgstr ""

#: ../../library/dbm.rst:163
#: ../../library/dbm.rst:266
msgid "|incompat_note|"
msgstr ""

#: ../../library/dbm.rst:167
msgid "Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:`KeyError` is raised for general mapping errors like specifying an incorrect key."
msgstr ""

#: ../../library/dbm.rst:173
msgid "Open a GDBM database and return a :class:`!gdbm` object."
msgstr ""

#: ../../library/dbm.rst:179
msgid "* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * ``'n'``: |flag_n|  The following additional characters may be appended to control how the database is opened:  * ``'f'``: Open the database in fast mode.   Writes to the database will not be synchronized. * ``'s'``: Synchronized mode.   Changes to the database will be written immediately to the file. * ``'u'``: Do not lock database.  Not all flags are valid for all versions of GDBM. See the :data:`open_flags` member for a list of supported flag characters."
msgstr ""

#: ../../library/dbm.rst:185
msgid "The following additional characters may be appended to control how the database is opened:"
msgstr ""

#: ../../library/dbm.rst:188
msgid "``'f'``: Open the database in fast mode. Writes to the database will not be synchronized."
msgstr ""

#: ../../library/dbm.rst:190
msgid "``'s'``: Synchronized mode. Changes to the database will be written immediately to the file."
msgstr ""

#: ../../library/dbm.rst:192
msgid "``'u'``: Do not lock database."
msgstr ""

#: ../../library/dbm.rst:194
msgid "Not all flags are valid for all versions of GDBM. See the :data:`open_flags` member for a list of supported flag characters."
msgstr ""

#: ../../library/dbm.rst:0
msgid "Raises"
msgstr ""

#: ../../library/dbm.rst:200
msgid "If an invalid *flag* argument is passed."
msgstr ""

#: ../../library/dbm.rst:208
msgid "A string of characters the *flag* parameter of :meth:`~dbm.gnu.open` supports."
msgstr ""

#: ../../library/dbm.rst:210
msgid ":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, but :meth:`!items` and :meth:`!values` methods are not supported. The following methods are also provided:"
msgstr ""

#: ../../library/dbm.rst:216
msgid "It's possible to loop over every key in the database using this method  and the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal hash values, and won't be sorted by the key values.  This method returns the starting key."
msgstr ""

#: ../../library/dbm.rst:223
msgid "Returns the key that follows *key* in the traversal.  The following code prints every key in the database ``db``, without having to create a list in memory that contains them all::"
msgstr ""

#: ../../library/dbm.rst:234
msgid "If you have carried out a lot of deletions and would like to shrink the space used by the GDBM file, this routine will reorganize the database.  :class:`!gdbm` objects will not shorten the length of a database file except by using this reorganization; otherwise, deleted file space will be kept and reused as new (key, value) pairs are added."
msgstr ""

#: ../../library/dbm.rst:242
msgid "When the database has been opened in fast mode, this method forces any unwritten data to be written to the disk."
msgstr ""

#: ../../library/dbm.rst:247
msgid "Close the GDBM database."
msgstr ""

#: ../../library/dbm.rst:251
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ""

#: ../../library/dbm.rst:257
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr ""

#: ../../library/dbm.rst:261
msgid "The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New Database Manager)` library. This module can be used with the \"classic\" NDBM interface or the :abbr:`GDBM (GNU dbm)` compatibility interface."
msgstr ""

#: ../../library/dbm.rst:270
msgid "The NDBM library shipped as part of macOS has an undocumented limitation on the size of values, which can result in corrupted database files when storing values larger than this limit. Reading such corrupted files can result in a hard crash (segmentation fault)."
msgstr ""

#: ../../library/dbm.rst:277
msgid "Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:`KeyError` is raised for general mapping errors like specifying an incorrect key."
msgstr ""

#: ../../library/dbm.rst:283
msgid "Name of the NDBM implementation library used."
msgstr ""

#: ../../library/dbm.rst:288
msgid "Open an NDBM database and return an :class:`!ndbm` object."
msgstr ""

#: ../../library/dbm.rst:290
msgid "The basename of the database file (without the :file:`.dir` or :file:`.pag` extensions)."
msgstr ""

#: ../../library/dbm.rst:304
msgid ":class:`!ndbm` objects behave similar to :term:`mappings <mapping>`, but :meth:`!items` and :meth:`!values` methods are not supported. The following methods are also provided:"
msgstr ""

#: ../../library/dbm.rst:308
msgid "Accepts :term:`path-like object` for filename."
msgstr ""

#: ../../library/dbm.rst:313
msgid "Close the NDBM database."
msgstr ""

#: ../../library/dbm.rst:317
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ""

#: ../../library/dbm.rst:322
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr ""

#: ../../library/dbm.rst:328
msgid "The :mod:`dbm.dumb` module is intended as a last resort fallback for the :mod:`dbm` module when a more robust module is not available. The :mod:`dbm.dumb` module is not written for speed and is not nearly as heavily used as the other database modules."
msgstr ""

#: ../../library/dbm.rst:335
msgid "The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like interface which is written entirely in Python. Unlike other :mod:`dbm` backends, such as :mod:`dbm.gnu`, no external library is required."
msgstr ""

#: ../../library/dbm.rst:340
msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr ""

#: ../../library/dbm.rst:344
msgid "Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:`KeyError` is raised for general mapping errors like specifying an incorrect key."
msgstr ""

#: ../../library/dbm.rst:350
msgid "Open a :mod:`!dbm.dumb` database. The returned database object behaves similar to a :term:`mapping`, in addition to providing :meth:`~dumbdbm.sync` and :meth:`~dumbdbm.close` methods."
msgstr ""

#: ../../library/dbm.rst:355
msgid "The basename of the database file (without extensions). A new database creates the following files:  - :file:`{filename}.dat` - :file:`{filename}.dir`"
msgstr ""

#: ../../library/dbm.rst:356
msgid "The basename of the database file (without extensions). A new database creates the following files:"
msgstr ""

#: ../../library/dbm.rst:359
msgid ":file:`{filename}.dat`"
msgstr ""

#: ../../library/dbm.rst:360
msgid ":file:`{filename}.dir`"
msgstr ""

#: ../../library/dbm.rst:363
msgid "* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * ``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:364
msgid "``'r'``: |flag_r|"
msgstr ""

#: ../../library/dbm.rst:366
msgid "``'c'`` (default): |flag_c|"
msgstr ""

#: ../../library/dbm.rst:373
msgid "It is possible to crash the Python interpreter when loading a database with a sufficiently large/complex entry due to stack depth limitations in Python's AST compiler."
msgstr ""

#: ../../library/dbm.rst:377
msgid ":func:`~dbm.dumb.open` always creates a new database when *flag* is ``'n'``."
msgstr ""

#: ../../library/dbm.rst:380
msgid "A database opened read-only if *flag* is ``'r'``. A database is not created if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""

#: ../../library/dbm.rst:387
msgid "In addition to the methods provided by the :class:`collections.abc.MutableMapping` class, the following methods are provided:"
msgstr ""

#: ../../library/dbm.rst:393
msgid "Synchronize the on-disk directory and data files.  This method is called by the :meth:`Shelve.sync` method."
msgstr ""

#: ../../library/dbm.rst:398
msgid "Close the database."
msgstr ""

#: ../../library/dbm.rst:324
msgid "databases"
msgstr ""
